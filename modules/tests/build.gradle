plugins {
	id "de.undercouch.download" version "3.1.2"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext {
	junitVersion = '4.12'
	mockitoVersion = '2.10.0'
	seleniumVersion = '3.3.1'
	frwSeleniumCommonsVersion = '2.2.2'
}

configure(subprojects.findAll { !it.subprojects }) {
	afterEvaluate { project ->
		dependencies {
			compile group: "org.json", name: "org.json", version: "2.0"
	
			compile 'com.liferay.gs:frw-selenium-commons:' + frwSeleniumCommonsVersion
		
			compile 'org.seleniumhq.selenium:selenium-api:' + seleniumVersion
			compile 'org.seleniumhq.selenium:selenium-java:' + seleniumVersion
			compile 'org.seleniumhq.selenium:selenium-remote-driver:' + seleniumVersion
			compile 'org.seleniumhq.selenium:selenium-support:' + seleniumVersion
			
			compile 'org.codehaus.groovy:groovy-all:2.4.5'
			
			testCompile group: "junit", name: "junit", version: junitVersion

			testCompile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'

			testCompile group: "org.mockito", name: "mockito-core", version: mockitoVersion
		}

		deploy {
			enabled = false
		}
	}


	tasks.withType(Test) {
	    testLogging {
	        events "passed", "skipped", "failed", "standardOut"
	        showExceptions true
	        exceptionFormat "full"
	        showCauses true
	        showStackTraces true
	
	        afterSuite { desc, result ->
	            if (!desc.parent) {
	                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
	                def startItem = '|  ', endItem = '  |'
	                def repeatLength = startItem.length() + output.length() + endItem.length()
	                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
	            }
	        }
	    }
	}
	
	tasks.withType(Test) {
	    reports.html.destination = file("${reporting.baseDir}/${name}")
	}
}