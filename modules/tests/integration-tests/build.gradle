import org.apache.tools.ant.taskdefs.condition.Os

jar.enabled = false

group = 'com.liferay.integration'
version = '1.0.0-SNAPSHOT'

description = """Samples Integration Test Module"""

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    description 'Runs the Integration Tests.'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(build)) {
        integrationTest.enabled = false
    }
}

task setupIntegrationTestWithGoogleChrome {
    description 'Create the Integration Tests properties and Chrome Driver, but only work if run on project root folder.'

	doLast {
		def baseDir =  "${project.hasProperty('liferay.workspace.home.dir') ? project.property('liferay.workspace.home.dir') : 'modules'}"
		def SeleniumPropertyKeysPath = new File( 'modules/tests/integration-tests/SeleniumProperties' )
		def SeleniumPropertyKeysFile = new File( 'modules/tests/integration-tests/SeleniumProperties/SeleniumPropertyKeys.properties' )
		println "You should run this task only on your project root folder"
		if( !SeleniumPropertyKeysFile.exists() ) {
			println "Create Configuration for use a local SeleniumPropertyKeys.properties"
			SeleniumPropertyKeysPath.mkdirs()
			SeleniumPropertyKeysFile.withWriterAppend { w ->
				w <<  "browser=defaultGCHeadless\ntime-out=10"
			}
		} else {
			println "You already had the local SeleniumPropertyKeys.properties created"
		}
		
		if ( (Os.isFamily(Os.FAMILY_WINDOWS)) && (!new File( baseDir + '/tests/integration-tests/SeleniumProperties/chromedriver.exe').exists()) ) {
			println "Create Configuration for Windows to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.34/chromedriver_win32.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_win32.zip')
			}

			copy {
				def DriverPath = new File ('/SeleniumProperties/')
				from zipTree('/SeleniumProperties/chromedriver_win32.zip')
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_win32.zip'

		} else if ( (Os.isFamily(Os.FAMILY_MAC)) && (!new File( baseDir + '/tests/integration-tests/SeleniumProperties/chromedriver').exists()) ) {
			println "Create Configuration for Mac to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.34/chromedriver_mac64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_mac64.zip')
			}
            
			copy {
				def DriverPath = new File ('/SeleniumProperties/')
				from zipTree('SeleniumProperties/chromedriver_mac64.zip')
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_mac64.zip'

		} else if ( (Os.isFamily(Os.FAMILY_UNIX)) && (!new File( baseDir + '/tests/integration-tests/SeleniumProperties/chromedriver').exists()) ) {
			println "Create Configuration for Unix to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.34/chromedriver_linux64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_linux64.zip')
			}

			copy {
				from zipTree(new File('SeleniumProperties/', 'chromedriver_linux64.zip'))
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_linux64.zip'
		  } else {
			println "You already had the local Google Chrome Driver created"
		}
	}
}